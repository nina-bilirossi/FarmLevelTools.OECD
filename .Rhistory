#' This function allows to create a bar chart of a binary variable (Yes/No) against a categorical variable
#' @param bin_x binary variable
#' @param cat_y categorical variable
#' @param title Defaults to ""
#' @param x_title title, for the x axis, defaults to ""
#' @param legend_title defaults to ""
#' @param caption optional caption (e.g., "*Excluded 1 tool, open-source status = Pending.")
#' @export
#' @example examples.R
binary_X_categorical_Y_chart <- function(database, bin_x, cat_y, title = "",
x_title = "", legend_title = "", caption = NA) {
data_filtered <- database %>%
filter(!is.na({{bin_x}}), {{bin_x}} != "", {{bin_x}} != "Pending",
!is.na({{cat_y}}), {{cat_y}} != "")
n_tools <- nrow(data_filtered)
# Convert to factors
data_filtered <- data_filtered %>%
mutate(
bin_x = factor({{bin_x}}),
cat_y = factor({{cat_y}})
) %>%
mutate(
bin_x = factor(
{{bin_x}},
levels = c("Yes", "No", "Not applicable (model-agnostic)", "NA")
),
cat_y = factor({{cat_y}})
)
if(is.na(caption)){
caption <- glue('Number of tools: {n_tools}')
}
# Plot
ggplot(data_filtered, aes(x = bin_x, fill = cat_y)) +
geom_bar() +
theme_minimal() +
labs(
title = title,
x = x_title,
y = "number of tools",
fill = legend_title
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(caption = caption)
}
?binary_x_categorical_y
library(roxygen2)
setwd("./R")
devtools::document()
?binary_x_categorical_y
devtools::document()
devtools::document()
rm(list = c("binary_X_categorical_Y_chart"))
devtools::document()
?binary_x_categorical_y
?binary_X_categorical_Y_chart
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
? disaggregate_target
devtools::load_all()
library("FarmLevelTools.OECD")
devtools::load_all()
devtools::document()
list.files("R/")
list.files("R/", full.names = TRUE)
setwd("./R")
list.files("./R/", full.names = TRUE)
readLines("R/plot_category_counts.R")
readLines("R/barcharts.R")
devtools::load_all()
getwd()
list.files()
readLines("barcharts.R")
devtools::load_all()
# 1. Clean build artifacts
devtools::clean_dll()
# 2. Check the package for issues
devtools::check()
# 3. Build and install locally
devtools::install(build_vignettes = FALSE)
# 4. Load the package
library(FarmLevelTools.OECD)
